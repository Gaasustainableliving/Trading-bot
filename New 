# kraken_grid_bot.py  import os import time import krakenex from dotenv import load_dotenv  # === 🛡️ LOAD API KEYS FROM .env FILE === load_dotenv() API_KEY = os.getenv("API_KEY") API_SECRET = os.getenv("API_SECRET")  if not API_KEY or not API_SECRET:     print("❌ Missing API credentials. Please create a .env file with API_KEY and API_SECRET.")     exit(1)  # === CONFIGURATION === LIVE_MODE = False             # ✅ True = real trades, False = demo mode PAIR = 'SOLUSD' GRID_SPACING = 0.008          # Grid spacing (0.8%) TRADE_FRACTION = 0.25         # 25% of portfolio per trade MIN_TRADE_USD = 10.0          # Minimum trade value REBALANCE = True              # Optional 50/50 rebalance SLEEP_SECONDS = 60            # Wait between trade cycles  # === INIT KRAKEN API === api = krakenex.API() api.key = API_KEY api.secret = API_SECRET  # === FUNCTIONS === def get_balance():     res = api.query_private('Balance')     return res['result'] if res.get('error') == [] else {}  def get_price():     res = api.query_public('Ticker', {'pair': PAIR})     if 'error' in res and res['error']:         return None     ticker = list(res['result'].keys())[0]     return float(res['result'][ticker]['c'][0])  def place_order(order_type, volume, price):     order = {         'pair': PAIR,         'type': order_type,         'ordertype': 'limit',         'price': str(price),         'volume': str(volume)     }     if LIVE_MODE:         return api.query_private('AddOrder', order)     else:         print(f"[DEMO] {order_type.upper()} {volume} SOL @ ${price}")         return {'result': 'demo'}  def get_portfolio_values(price):     balances = get_balance()     sol = float(balances.get('SOL', 0))     usd = float(balances.get('ZUSD', 0))     total = usd + sol * price     return sol, usd, total  def rebalance(price, sol, usd):     total = usd + sol * price     target = total / 2     if usd > target + 5:         vol = round((usd - target) / price, 4)         print(f"[REBALANCE] Buying {vol} SOL at ${price}")         place_order('buy', vol, price)     elif sol * price > target + 5:         vol = round((sol * price - target) / price, 4)         print(f"[REBALANCE] Selling {vol} SOL at ${price}")         place_order('sell', vol, price)  def trade_cycle():     price = get_price()     if not price:         print("[ERROR] Could not fetch price.")         return      sol, usd, total = get_portfolio_values(price)     trade_usd = total * TRADE_FRACTION      if trade_usd < MIN_TRADE_USD:         print(f"[SKIP] ${trade_usd:.2f} too small to trade.")         return      trade_volume = round(trade_usd / price, 4)     buy_price = round(price * (1 - GRID_SPACING), 2)     sell_price = round(price * (1 + GRID_SPACING), 2)      print(f"\n[TRADE CYCLE]")     print(f"Price: ${price:.2f} | SOL: {sol:.4f} | USD: ${usd:.2f} | Total: ${total:.2f}")     print(f"Placing BUY @ ${buy_price}, SELL @ ${sell_price} for {trade_volume} SOL")      place_order('buy', trade_volume, buy_price)     place_order('sell', trade_volume, sell_price)      if REBALANCE:         rebalance(price, sol, usd)  # === MAIN LOOP === print(f"\n🚀 Kraken Grid Bot running in {'LIVE' if LIVE_MODE else 'DEMO'} mode...\n") while True:     try:         trade_cycle()     except Exception as e:         print("[ERROR]", str(e))     time.sleep(SLEEP_SECONDS)